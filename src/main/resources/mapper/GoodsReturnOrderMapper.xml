<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.qxt.dao.GoodsReturnOrderDao">
  <resultMap id="BaseResultMap" type="cn.qxt.pojo.GoodsReturnOrder">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_id" jdbcType="INTEGER" property="order_id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="create_time" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="type" jdbcType="VARCHAR" property="type" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, order_id, create_time, status, type
  </sql>
  <select id="selectByExample" parameterType="cn.qxt.pojo.GoodsReturnOrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from goods_return_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from goods_return_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from goods_return_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.qxt.pojo.GoodsReturnOrder">
    insert into goods_return_order (id, order_id, create_time, 
      status, type)
    values (#{id,jdbcType=INTEGER}, #{order_id,jdbcType=INTEGER}, #{create_time,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.qxt.pojo.GoodsReturnOrder">
    insert into goods_return_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="order_id != null">
        order_id,
      </if>
      <if test="create_time != null">
        create_time,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="type != null">
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="order_id != null">
        #{order_id,jdbcType=INTEGER},
      </if>
      <if test="create_time != null">
        #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.qxt.pojo.GoodsReturnOrder">
    update goods_return_order
    <set>
      <if test="order_id != null">
        order_id = #{order_id,jdbcType=INTEGER},
      </if>
      <if test="create_time != null">
        create_time = #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.qxt.pojo.GoodsReturnOrder">
    update goods_return_order
    set order_id = #{order_id,jdbcType=INTEGER},
      create_time = #{create_time,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="selectGoodsReturnOrderInfoByPrimaryKey" parameterType="java.lang.Integer" resultType="java.util.Map">
        select goods_return_order.id as id, `order`.id as order_id,product.name as product_name,`order`.quantity as quantity,
               `order`.create_time as create_time,`order`.status as order_status,
               `order`.deposit as deposit,`order`.total_payment as total_payment,
               `goods_return_order`.status, `goods_return_order`.type
        from `order`
                 join product
                      on product_id = product.id
                 join goods_return_order
                      on `order`.id = goods_return_order.order_id
        where `goods_return_order`.id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectGoodsReturnOrderInfoByOrderId" parameterType="java.lang.Integer" resultType="java.util.Map">
        select goods_return_order.id as id, `order`.id as order_id,product.name as product_name,`order`.quantity as quantity,
               `order`.create_time as create_time,`order`.status as order_status,
               `order`.deposit as deposit,`order`.total_payment as total_payment,
               `goods_return_order`.status ,`goods_return_order`.type
        from `order`
                 join product
                      on product_id = product.id
                 join goods_return_order
                      on `order`.id = goods_return_order.order_id
        where `order`.id = #{id,jdbcType=INTEGER}
    </select>
</mapper>