<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.qxt.dao.MaterialRecordDao">
  <resultMap id="BaseResultMap" type="cn.qxt.pojo.MaterialRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="material_id" jdbcType="INTEGER" property="material_id" />
    <result column="quantity" jdbcType="INTEGER" property="quantity" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="create_time" jdbcType="TIMESTAMP" property="create_time" />
    <result column="inventory_id" jdbcType="INTEGER" property="inventory_id" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, material_id, quantity, type, create_time, inventory_id
  </sql>
  <select id="selectByExample" parameterType="cn.qxt.pojo.MaterialRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from material_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from material_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from material_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.qxt.pojo.MaterialRecord">
    insert into material_record (id, material_id, quantity, 
      type, create_time, inventory_id
      )
    values (#{id,jdbcType=INTEGER}, #{material_id,jdbcType=INTEGER}, #{quantity,jdbcType=INTEGER}, 
      #{type,jdbcType=VARCHAR}, #{create_time,jdbcType=TIMESTAMP}, #{inventory_id,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.qxt.pojo.MaterialRecord">
    insert into material_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="material_id != null">
        material_id,
      </if>
      <if test="quantity != null">
        quantity,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="create_time != null">
        create_time,
      </if>
      <if test="inventory_id != null">
        inventory_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="material_id != null">
        #{material_id,jdbcType=INTEGER},
      </if>
      <if test="quantity != null">
        #{quantity,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="create_time != null">
        #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="inventory_id != null">
        #{inventory_id,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.qxt.pojo.MaterialRecord">
    update material_record
    <set>
      <if test="material_id != null">
        material_id = #{material_id,jdbcType=INTEGER},
      </if>
      <if test="quantity != null">
        quantity = #{quantity,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="create_time != null">
        create_time = #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="inventory_id != null">
        inventory_id = #{inventory_id,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.qxt.pojo.MaterialRecord">
    update material_record
    set material_id = #{material_id,jdbcType=INTEGER},
      quantity = #{quantity,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
      create_time = #{create_time,jdbcType=TIMESTAMP},
      inventory_id = #{inventory_id,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="selectRecordInfoById" parameterType="java.lang.Integer" resultType="java.util.Map">
        select material_record.material_id,material.name as material_name,material_record.quantity,material_record.create_time as record_create_time
        from material_record
            join material
                on material_id = material.id
            join material_inventory
                on material_inventory.Id = material_record.inventory_id
        where material_record.id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectInventoryRecordInfoByInventoryId" parameterType="java.lang.Integer" resultType="java.util.List">
        select material_record.material_id,material.name as material_name,material_record.quantity,material_record.create_time as record_create_time
        from material_record
                 join material
                      on material_id = material.id
                 join material_inventory
                      on material_inventory.Id = material_record.inventory_id
        where material_inventory.id = #{id,jdbcType=INTEGER}
    </select>
</mapper>