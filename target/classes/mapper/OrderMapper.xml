<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.qxt.dao.OrderDao">
    <resultMap id="BaseResultMap" type="cn.qxt.pojo.Order">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="client_id" jdbcType="VARCHAR" property="client_id" />
        <result column="product_id" jdbcType="INTEGER" property="product_id" />
        <result column="quantity" jdbcType="INTEGER" property="quantity" />
        <result column="status" jdbcType="VARCHAR" property="status" />
        <result column="create_time" jdbcType="TIMESTAMP" property="create_time" />
        <result column="deposit" jdbcType="DOUBLE" property="deposit" />
        <result column="total_payment" jdbcType="DOUBLE" property="total_payment" />
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, client_id, product_id, quantity, status, create_time, deposit, total_payment
    </sql>
    <select id="selectByExample" parameterType="cn.qxt.pojo.OrderExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'false' as QUERYID,
        <include refid="Base_Column_List" />
        from `order`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from `order`
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from `order`
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="cn.qxt.pojo.Order">
        insert into `order` (id, client_id, product_id,
                             quantity, status, create_time,
                             deposit, total_payment)
        values (#{id,jdbcType=INTEGER}, #{client_id,jdbcType=VARCHAR}, #{product_id,jdbcType=INTEGER},
                #{quantity,jdbcType=INTEGER}, #{status,jdbcType=VARCHAR}, #{create_time,jdbcType=TIMESTAMP},
                #{deposit,jdbcType=DOUBLE}, #{total_payment,jdbcType=DOUBLE})
    </insert>
    <insert id="insertSelective" parameterType="cn.qxt.pojo.Order">
        insert into `order`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="client_id != null">
                client_id,
            </if>
            <if test="product_id != null">
                product_id,
            </if>
            <if test="quantity != null">
                quantity,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="create_time != null">
                create_time,
            </if>
            <if test="deposit != null">
                deposit,
            </if>
            <if test="total_payment != null">
                total_payment,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="client_id != null">
                #{client_id,jdbcType=VARCHAR},
            </if>
            <if test="product_id != null">
                #{product_id,jdbcType=INTEGER},
            </if>
            <if test="quantity != null">
                #{quantity,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="create_time != null">
                #{create_time,jdbcType=TIMESTAMP},
            </if>
            <if test="deposit != null">
                #{deposit,jdbcType=DOUBLE},
            </if>
            <if test="total_payment != null">
                #{total_payment,jdbcType=DOUBLE},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="cn.qxt.pojo.Order">
        update `order`
        <set>
            <if test="client_id != null">
                client_id = #{client_id,jdbcType=VARCHAR},
            </if>
            <if test="product_id != null">
                product_id = #{product_id,jdbcType=INTEGER},
            </if>
            <if test="quantity != null">
                quantity = #{quantity,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="create_time != null">
                create_time = #{create_time,jdbcType=TIMESTAMP},
            </if>
            <if test="deposit != null">
                deposit = #{deposit,jdbcType=DOUBLE},
            </if>
            <if test="total_payment != null">
                total_payment = #{total_payment,jdbcType=DOUBLE},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.qxt.pojo.Order">
        update `order`
        set client_id = #{client_id,jdbcType=VARCHAR},
            product_id = #{product_id,jdbcType=INTEGER},
            quantity = #{quantity,jdbcType=INTEGER},
            status = #{status,jdbcType=VARCHAR},
            create_time = #{create_time,jdbcType=TIMESTAMP},
            deposit = #{deposit,jdbcType=DOUBLE},
            total_payment = #{total_payment,jdbcType=DOUBLE}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectOrderInfo" resultType="java.util.Map">
        select `order`.id as order_id,product.name as product_name,`order`.quantity as quantity,
               `order`.create_time as create_time,client.id as client_id,client.name as client_name,client.address as address,client.type as client_type,status
        from `order`
                 join product
                      on product_id = product.id
                 join client
                      on client_id = client.id
    </select>
    <select id="selectOrderInfoByOrderId" parameterType="java.lang.Integer" resultType="java.util.Map">
        select `order`.id as order_id,product.name as product_name,`order`.quantity as quantity,
               `order`.create_time as create_time,client.id as client_id,client.name as client_name,client.address as address,client.type as client_type,status
        from `order`
                 join product
                      on product_id = product.id
                 join client
                      on client_id = client.id
        where `order`.id = #{id,jdbcType=INTEGER}
    </select>
</mapper>